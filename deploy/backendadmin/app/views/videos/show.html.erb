<div class="min-h-screen bg-gray-50 py-8">
  <div class="container mx-auto px-4 max-w-4xl">
    <div class="bg-white rounded-lg shadow-lg p-8">
      <div class="flex justify-between items-start mb-6">
        <div>
          <h1 class="text-3xl font-bold text-gray-800"><%= @video[:title] %></h1>
          <p class="text-gray-600 mt-2"><%= @video[:description] %></p>
        </div>
        <%= link_to "Back to Videos", videos_path, 
            class: "bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg transition" %>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="bg-gray-50 rounded-lg p-6">
          <h2 class="text-xl font-semibold mb-4">Video Information</h2>
          <dl class="space-y-3">
            <div class="flex justify-between">
              <dt class="text-gray-600">Video ID:</dt>
              <dd class="font-mono text-sm"><%= @video[:video_id] %></dd>
            </div>
            <div class="flex justify-between">
              <dt class="text-gray-600">Original Filename:</dt>
              <dd><%= @video[:original_filename] %></dd>
            </div>
            <div class="flex justify-between">
              <dt class="text-gray-600">File Size:</dt>
              <dd><%= @video[:file_size_mb] %> MB</dd>
            </div>
            <div class="flex justify-between">
              <dt class="text-gray-600">Duration:</dt>
              <dd><%= @video[:duration] ? "#{@video[:duration]} seconds" : "N/A" %></dd>
            </div>
            <div class="flex justify-between">
              <dt class="text-gray-600">Uploaded:</dt>
              <dd><%= @video.uploaded_at ? @video.uploaded_at.strftime("%B %d, %Y at %I:%M %p") : "N/A" %></dd>
            </div>
          </dl>
        </div>
        
        <div class="bg-blue-50 rounded-lg p-6">
          <h2 class="text-xl font-semibold mb-4">LiveKit On-Demand Streaming</h2>
          
          <% if @video[:streaming_active] %>
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
              <p class="font-bold">✅ Streaming Active</p>
              <p class="text-sm">Video is streaming from: <%= @video[:video_url] %></p>
              <p class="text-sm mt-1">Status: <%= @video[:streaming_status] || 'ENDPOINT_BUFFERING' %></p>
              <% if @video[:stream_started_at] %>
                <p class="text-sm mt-1">Started: <%= Time.parse(@video[:stream_started_at]).strftime("%I:%M %p") %></p>
              <% end %>
            </div>
            <%= button_to "Stop Streaming", stop_stream_video_path(@video[:video_id]), 
                method: :post,
                class: "w-full bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded transition",
                data: { confirm: "Stop streaming this video?" } %>
          <% else %>
            <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-4">
              <p class="font-bold">⏸️ Not Streaming</p>
              <p class="text-sm">Video will stream on-demand when requested</p>
              <p class="text-sm mt-1">Click "Start Streaming" to begin</p>
            </div>
            <%= button_to "Start Streaming", start_stream_video_path(@video[:video_id]), 
                method: :post,
                class: "w-full bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition" %>
          <% end %>
          
          <div class="space-y-4">
            <div class="bg-white p-3 rounded">
              <h3 class="font-semibold mb-2">iOS App Connection</h3>
              <p class="text-sm text-gray-600 mb-2">Connect your iOS app to receive the stream:</p>
              <code class="block bg-gray-100 p-2 rounded text-xs mb-2">
                POST https://admin.livekit.lovedrop.live/videos/<%= @video[:video_id] %>/play
              </code>
              <button onclick="getViewerToken()" 
                      class="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition">
                Get iOS Viewer Token
              </button>
            </div>
            
            <% if @video[:ingress_type] != 'URL_INPUT' %>
              <div class="bg-white p-3 rounded">
                <h3 class="font-semibold mb-2">Manual Streaming (Legacy)</h3>
                <p class="text-sm text-gray-600 mb-2">Stream video using WHIP protocol:</p>
                <div class="space-y-2 text-xs">
                  <div>
                    <strong>Ingress URL:</strong>
                    <code class="block mt-1 p-1 bg-gray-100 rounded break-all"><%= @video[:ingress_url] %></code>
                  </div>
                  <div>
                    <strong>Stream Key:</strong>
                    <code class="block mt-1 p-1 bg-gray-100 rounded"><%= @video[:stream_key] %></code>
                  </div>
                </div>
                <button onclick="getPublisherToken()" 
                        class="w-full mt-2 bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition">
                  Get Publisher Token
                </button>
              </div>
            <% end %>
            
            <div id="connection-info" class="hidden">
              <p class="text-sm text-gray-600 mb-2">Connection Details:</p>
              <div class="bg-white p-3 rounded space-y-2 text-xs">
                <div>
                  <strong>WebSocket URL:</strong>
                  <code id="ws-url" class="block mt-1 p-1 bg-gray-100 rounded"></code>
                </div>
                <div>
                  <strong>Room Name:</strong>
                  <code id="room-name" class="block mt-1 p-1 bg-gray-100 rounded"></code>
                </div>
                <div>
                  <strong>Access Token:</strong>
                  <code id="access-token" class="block mt-1 p-1 bg-gray-100 rounded break-all"></code>
                  <button onclick="copyToken()" class="mt-2 text-blue-500 hover:text-blue-700">Copy Token</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="mt-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
        <h3 class="font-semibold text-yellow-800 mb-2">iOS Implementation Example</h3>
        <pre class="text-xs bg-white p-3 rounded overflow-x-auto"><code>// Swift code for iOS app
import LiveKit

// Request stream from your backend
let response = await requestStream(videoId: "<%= @video[:video_id] %>")

// Connect to LiveKit
let room = Room()
try await room.connect(
    url: response.websocketUrl,  // "wss://livekit.lovedrop.live"
    token: response.token
)

// Subscribe to video track
room.delegate = self  // Implement RoomDelegate to receive video</code></pre>
      </div>
    </div>
  </div>
</div>

<script>
let currentToken = null;

function getViewerToken() {
  fetch('/videos/<%= @video[:video_id] %>/play', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      document.getElementById('connection-info').classList.remove('hidden');
      document.getElementById('ws-url').textContent = data.websocket_url;
      document.getElementById('room-name').textContent = data.room_name;
      document.getElementById('access-token').textContent = data.token;
      currentToken = data.token;
      
      const info = `
LiveKit Room Ready for iOS App!

Room: ${data.room_name}
WebSocket: ${data.websocket_url}
Token: (copied to clipboard)
Streaming Status: ${data.ingress.status || 'Starting on-demand'}

Your iOS app can now connect and receive the video stream.
The video is being streamed on-demand from the MP4 file.
      `;
      
      navigator.clipboard.writeText(data.token);
      alert(info);
      console.log('Full response:', data);
    } else {
      alert(`Error: ${data.error}`);
    }
  })
  .catch(error => {
    alert(`Error: ${error.message}`);
  });
}

function getPublisherToken() {
  fetch('/videos/<%= @video[:video_id] %>/publish', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      document.getElementById('connection-info').classList.remove('hidden');
      document.getElementById('ws-url').textContent = data.websocket_url;
      document.getElementById('room-name').textContent = data.room_name;
      document.getElementById('access-token').textContent = data.publisher_token;
      currentToken = data.publisher_token;
      
      const info = `
Publisher Token Generated!

To stream your video to LiveKit:

1. Using OBS with WHIP:
   - URL: ${data.ingress.url}
   - Stream Key: ${data.ingress.stream_key}

2. Using Browser/WebRTC:
   - Use the publisher token (copied to clipboard)
   - Connect to: ${data.websocket_url}
   - Room: ${data.room_name}

Video URL: ${data.video_url}
      `;
      
      navigator.clipboard.writeText(data.publisher_token);
      alert(info);
      console.log('Full response:', data);
    } else {
      alert(`Error: ${data.error}`);
    }
  })
  .catch(error => {
    alert(`Error: ${error.message}`);
  });
}

function copyToken() {
  if (currentToken) {
    navigator.clipboard.writeText(currentToken);
    alert('Token copied to clipboard!');
  }
}
</script>